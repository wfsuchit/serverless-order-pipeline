AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  serverless-order-pipeline

  Sample SAM Template for serverless-order-pipeline

Parameters:
  # Currently not in use
  ModuleName:
    Type: String
    Default: serverless-order-pipeline
    Description: Module name with respect to which all the resources will be made
  Environment:
    Type: String
    Default: dev

Resources:

  # RootApiGateway:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: Prod

  CreateOrderLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambdas/create_order
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      FunctionName: !Join ["-", [!Ref "ModuleName", "create-order"]]
      Description: "Lambda to create a new order"
      # Events:
      #   HttpPost:
      #     Type: 'Api'
      #     Properties:
      #       RestApiId: !Ref RootApiGateway
      #       Path: /order/createOrder
      #       Method: post
      Role: !GetAtt EntryLambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SnsTopic
          # MEMORYDB_ARN: !Ref MemoryDBCluster
      VpcConfig:
        SecurityGroupIds:
          - sg-0786bd95583dca17e
        SubnetIds:
          - subnet-0bb2f9ecd49dc8206
          - subnet-000f285aab8352835

  UpdateOrderLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambdas/update_order
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      FunctionName: !Join ["-", [!Ref "ModuleName", "update-order"]]
      Description: "Lambda to update a existing order"
      # Events:
      #   HttpPost:
      #     Type: 'Api'
      #     Properties:
      #       RestApiId: !Ref RootApiGateway
      #       Path: /order/updateOrder
      #       Method: post
      Role: !GetAtt EntryLambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SnsTopic
          # MEMORYDB_ARN: !Ref MemoryDBCluster
      VpcConfig:
        SecurityGroupIds:
          - sg-0786bd95583dca17e
        SubnetIds:
          - subnet-0bb2f9ecd49dc8206
          - subnet-000f285aab8352835

  FetchOrderLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambdas/fetch_order
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      FunctionName: !Join ["-", [!Ref "ModuleName", "fetch-order"]]
      Description: "Lambda to fetch a existing order"
      # Events:
      #   HttpPost:
      #     Type: 'Api'
      #     Properties:
      #       RestApiId: !Ref RootApiGateway
      #       Path: /order/fetchOrder
      #       Method: post
      Role: !GetAtt EntryLambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SnsTopic
          # MEMORYDB_ARN: !Ref MemoryDBCluster
      VpcConfig:
        SecurityGroupIds:
          - sg-0786bd95583dca17e
        SubnetIds:
          - subnet-0bb2f9ecd49dc8206
          - subnet-000f285aab8352835

  EnrichOrderLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambdas/enrich_order
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      FunctionName: !Join ["-", [!Ref "ModuleName", "enrich-order"]]
      Description: "Lambda to enrich an order"
      # Events:
      #   HttpPost:
      #     Type: 'Api'
      #     Properties:
      #       RestApiId: !Ref RootApiGateway
      #       Path: /order/enrichOrder
      #       Method: post
      Role: !GetAtt EntryLambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SnsTopic
          # MEMORYDB_ARN: !Ref MemoryDBCluster
      VpcConfig:
        SecurityGroupIds:
          - sg-0786bd95583dca17e
        SubnetIds:
          - subnet-0bb2f9ecd49dc8206
          - subnet-000f285aab8352835

  EntryLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaCloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: MemorydbLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - SNS:Publish
                Resource: !Ref SnsTopic
              - Effect: Allow
                Action:
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeInstances"
                  - "ec2:AttachNetworkInterface"
                Resource: "*"
              - Effect: Allow
                Action:
                  - memorydb:GetItem
                  - memorydb:PutItem
                  - memorydb:DeleteItem
                Resource: arn:aws:memorydb:ap-south-1:613231527352:cluster/serverless-order-pipeline-dev-memdb

  # MemoryDBCluster:
  #   Type: AWS::MemoryDB::Cluster
  #   Properties:
  #     ClusterName: !Join ["-", [!Ref "ModuleName", !Ref "Environment", "memdb"]]
  #     ACLName: open-access
  #     NodeType: db.t4g.small
  #     NumShards: 1
  #     SubnetGroupName: wlns-stage-memorydb-subnet-01
  #     SecurityGroupIds:
  #       -  sg-0786bd95583dca17e

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join ["-", [!Ref "ModuleName", "sns"]]
      # TopicName: !Join ["-", [!Ref "ModuleName", "sns"]]
      # FifoTopic: false
      Subscription:
        - Endpoint: !GetAtt ElasticQueue.Arn
          Protocol: "sqs"
      #   - Endpoint: !GetAtt QueueTwo.Arn
      #     Protocol: "sqs"
      Tags:
        - Key: Env
          Value: POC
        - Key: module
          Value: !Ref "ModuleName"

  ElasticQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 120
      Tags:
        - Key: Env
          Value: POC
        - Key: module
          Value: !Ref "ModuleName"

  LambdaSqsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SQSLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: 
                  - !GetAtt ElasticQueue.Arn
                  # - !GetAtt HealthtechQueueTwo.Arn
        - PolicyName: LambdaCloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: MemorydbLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - SNS:Publish
                Resource: !Ref SnsTopic
              - Effect: Allow
                Action:
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeInstances"
                  - "ec2:AttachNetworkInterface"
                Resource: "*"
              - Effect: Allow
                Action:
                  - memorydb:GetItem
                  - memorydb:PutItem
                  - memorydb:DeleteItem
                Resource: arn:aws:memorydb:ap-south-1:613231527352:cluster/serverless-order-pipeline-dev-memdb

  ElasticDumpLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambdas/elastic_dump
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      FunctionName: !Join ["-", [!Ref "ModuleName", "elastic-dump"]]
      Description: "serverless-order-pipeline SQS One triggered lambda to dump order details to elastic"
      Events:
        SqsEvent:
          Type: 'SQS'
          Properties:
            Queue: !GetAtt ElasticQueue.Arn
            BatchSize: 1
      Role: !GetAtt LambdaSqsRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SnsTopic
      VpcConfig:
        SecurityGroupIds:
          - sg-0786bd95583dca17e
        SubnetIds:
          - subnet-0bb2f9ecd49dc8206
          - subnet-000f285aab8352835

  SnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: SQS:SendMessage
            Resource: arn:aws:sqs:ap-south-1:*
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SnsTopic
      Queues:
        - !Ref ElasticQueue
        # - !Ref HealthtechQueueTwo

# Outputs:
#   WebEndpoint:
#     Description: API Gateway endpoint URL for Prod stage
#     Value: !Sub "https://${RootApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
#     Export:
#       Name: MyApiEndpoint
